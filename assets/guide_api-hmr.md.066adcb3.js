import{o as n,c as a,d as s}from"./app.b84b895a.js";const t='{"title":"HMR API","description":"","frontmatter":{"title":"HMR API"},"headers":[{"level":2,"title":"Required Conditional Guard","slug":"required-conditional-guard"},{"level":2,"title":"hot.accept(cb)","slug":"hot-accept-cb"},{"level":2,"title":"hot.accept(deps, cb)","slug":"hot-accept-deps-cb"},{"level":2,"title":"hot.dispose(cb)","slug":"hot-dispose-cb"},{"level":2,"title":"hot.data","slug":"hot-data"},{"level":2,"title":"hot.decline()","slug":"hot-decline"},{"level":2,"title":"hot.invalidate()","slug":"hot-invalidate"},{"level":2,"title":"hot.on(event, cb)","slug":"hot-on-event-cb"}],"relativePath":"guide/api-hmr.md","lastUpdated":1625605013368}',o={},e=s('<h1 id="hmr-api"><a class="header-anchor" href="#hmr-api" aria-hidden="true">#</a>HMR API</h1><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This is the client HMR API. For handling HMR update in plugins, see <a href="./api-plugin.html#handlehotupdate">handleHotUpdate</a>.</p><p>The manual HMR API is primarily intended for framework and tooling authors. As an end user, HMR is likely already handled for you in the framework specific starter templates.</p></div><p>Vite exposes its manual HMR API via the special <code>import.<wbr>meta.hot</code> object:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> hot<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> data<span class="token operator">:</span> <span class="token builtin">any</span>\n\n    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mods<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">decline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n    <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="required-conditional-guard"><a class="header-anchor" href="#required-conditional-guard" aria-hidden="true">#</a>Required Conditional Guard</h2><p>First of all, make sure to guard all HMR API usage with a conditional block so that the code can be tree-shaken in production:</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// HMR code</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-accept-cb"><a class="header-anchor" href="#hot-accept-cb" aria-hidden="true">#</a><code>hot.accept(cb)</code></h2><p>For a module to self-accept, use <code>import.<wbr>meta.hot.accept</code> with a callback which receives the updated module:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newModule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updated: count is now &#39;</span><span class="token punctuation">,</span> newModule<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>A module that &quot;accepts&quot; hot updates is considered an <strong>HMR boundary</strong>.</p><p>Note that Vite&#39;s HMR does not actually swap the originally imported module: if an HMR boundary module re-exports imports from a dep, then it is responsible for updating those re-exports (and these exports must be using <code>let</code>). In addition, importers up the chain from the boundary module will not be notified of the change.</p><p>This simplified HMR implementation is sufficient for most dev use cases, while allowing us to skip the expensive work of generating proxy modules.</p><h2 id="hot-accept-deps-cb"><a class="header-anchor" href="#hot-accept-deps-cb" aria-hidden="true">#</a><code>hot.accept(deps, cb)</code></h2><p>A module can also accept updates from direct dependencies without reloading itself:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newFoo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// the callback receives the updated &#39;./foo.js&#39; module</span>\n    newFoo<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Can also accept an array of dep modules:</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./bar.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>newFooModule<span class="token punctuation">,</span> newBarModule<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// the callback receives the updated modules in an Array</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-dispose-cb"><a class="header-anchor" href="#hot-dispose-cb" aria-hidden="true">#</a><code>hot.dispose(cb)</code></h2><p>A self-accepting module or a module that expects to be accepted by others can use <code>hot.dispose</code> to clean-up any persistent side effects created by its updated copy:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">setupSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">setupSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// cleanup side effect</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-data"><a class="header-anchor" href="#hot-data" aria-hidden="true">#</a><code>hot.data</code></h2><p>The <code>import.<wbr>meta.hot.data</code> object is persisted across different instances of the same updated module. It can be used to pass on information from a previous version of the module to the next one.</p><h2 id="hot-decline"><a class="header-anchor" href="#hot-decline" aria-hidden="true">#</a><code>hot.decline()</code></h2><p>Calling <code>import.<wbr>meta.hot.decline()</code> indicates this module is not hot-updatable, and the browser should perform a full reload if this module is encountered while propagating HMR updates.</p><h2 id="hot-invalidate"><a class="header-anchor" href="#hot-invalidate" aria-hidden="true">#</a><code>hot.invalidate()</code></h2><p>For now, calling <code>import.<wbr>meta.hot.invalidate()</code> simply reloads the page.</p><h2 id="hot-on-event-cb"><a class="header-anchor" href="#hot-on-event-cb" aria-hidden="true">#</a><code>hot.on(event, cb)</code></h2><p>Listen to an HMR event.</p><p>The following HMR events are dispatched by Vite automatically:</p><ul><li><code>&#39;vite:beforeUpdate&#39;</code> when an update is about to be applied (e.g. a module will be replaced)</li><li><code>&#39;vite:beforeFullReload&#39;</code> when a full reload is about to occur</li><li><code>&#39;vite:beforePrune&#39;</code> when modules that are no longer needed are about to be pruned</li><li><code>&#39;vite:error&#39;</code> when an error occurs (e.g. syntax error)</li></ul><p>Custom HMR events can also be sent from plugins. See <a href="./api-plugin.html#handlehotupdate">handleHotUpdate</a> for more details.</p>',30);o.render=function(s,t,o,p,c,l){return n(),a("div",null,[e])};export default o;export{t as __pageData};
