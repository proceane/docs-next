import{o as e,c as t,d as a}from"./app.b84b895a.js";const n='{"title":"시작하기","description":"","frontmatter":{"title":"시작하기"},"headers":[{"level":2,"title":"들어가기 전에","slug":"overview"},{"level":2,"title":"지원하는 브라우저","slug":"browser-support"},{"level":2,"title":"첫 Vite 프로젝트 만들어보기","slug":"scaffolding-your-first-vite-project"},{"level":2,"title":"커뮤니티 템플릿","slug":"community-templates"},{"level":2,"title":"index.html 그리고 프로젝트의 루트","slug":"index-html-and-project-root"},{"level":2,"title":"커맨드 라인 인터페이스","slug":"command-line-interface"},{"level":2,"title":"릴리즈되지 않은 Vite 사용하기","slug":"using-unreleased-commits"},{"level":2,"title":"커뮤니티","slug":"community"}],"relativePath":"guide/index.md","lastUpdated":1625605013372}',o={},s=a('<h1 id="getting-started"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a>시작하기</h1><h2 id="overview"><a class="header-anchor" href="#overview" aria-hidden="true">#</a>들어가기 전에</h2><p>Vite(프랑스어로 &quot;빠르다&quot;를 의미하며, 발음은 <code>/vit/</code> 입니다.)은 빠르고 간결한 모던 웹 프로젝트 개발 경험에 초점을 맞춰 탄생한 빌드 도구이며, 두 가지 컨셉을 중심으로 하고 있습니다.</p><ul><li><p>개발 시 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">네이티브 ES Module</a>을 넘어 <a href="./features.html">더욱 다양한 기능</a>을 제공합니다. 가령, <a href="./features.html#hot-module-replacement">Hot Module Replacement (HMR)</a>과 같은 것들 말이죠.</p></li><li><p>번들링 시, <a href="https://rollupjs.org" target="_blank" rel="noopener noreferrer">Rollup</a> 기반의 다양한 빌드 커맨드를 사용할 수 있습니다. 이는 높은 수준으로 최적화된 정적(Static) 리소스들을 배포할 수 있게끔 하며, 미리 정의된 설정(Pre-configured)을 제공합니다.</p></li></ul><p>vite는 기본적으로 최적화 된 설정을 제공하지만, <a href="./api-plugin.html">Plugin API</a> 또는 <a href="./api-javascript.html">JavaScript API</a>를 이용할 수 있습니다. (물론 TypeScript 역시 지원하구요.)</p><p>왜 Vite를 만들게 되었는지 알고 싶다면 <a href="./why.html">Vite를 사용해야 하는 이유</a> 섹션을 참고해주세요.</p><h2 id="browser-support"><a class="header-anchor" href="#browser-support" aria-hidden="true">#</a>지원하는 브라우저</h2><ul><li><p>개발 시: 반드시 <a href="https://caniuse.com/es6-module-dynamic-import" target="_blank" rel="noopener noreferrer">Native ESM dynamic import</a>를 지원하는 브라우저를 이용해야 합니다.</p></li><li><p>배포 시: 기본적으로 <a href="https://caniuse.com/es6-module" target="_blank" rel="noopener noreferrer">Script 태그를 이용한 Native ESM</a>을 지원하는 브라우저를 대상으로 하고 있습니다. 만일 레거시 브라우저 역시 타겟으로 하고 있다면, <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noopener noreferrer">@vitejs/plugin-legacy</a> 플러그인을 이용해주세요. (<a href="./build.html">배포하기</a> 섹션에서 조금 더 자세히 다룹니다.)</p></li></ul><h2 id="scaffolding-your-first-vite-project"><a class="header-anchor" href="#scaffolding-your-first-vite-project" aria-hidden="true">#</a>첫 Vite 프로젝트 만들어보기</h2><div class="tip custom-block"><p class="custom-block-title">호환성</p><p>vite는 버전 12.0.0 이상의 <a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer">Node.js</a>를 요구합니다.</p></div><p>NPM:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> init @vitejs/app\n</code></pre></div><p>Yarn:</p><div class="language-bash"><pre><code>$ <span class="token function">yarn</span> create @vitejs/app\n</code></pre></div><p>이후에는 프롬프트 창에 출력된 메시지를 따라주세요.</p><p>물론 프로젝트의 이름이나 템플릿을 지정해 프로젝트를 만들 수 있습니다. 가령, Vite를 이용해 Vue 프로젝트를 만들자고 한다면...</p><div class="language-bash"><pre><code><span class="token comment"># npm 6.x</span>\n<span class="token function">npm</span> init @vitejs/app my-vue-app --template vue\n\n<span class="token comment"># npm 7+, extra double-dash is needed:</span>\n<span class="token function">npm</span> init @vitejs/app my-vue-app -- --template vue\n\n<span class="token comment"># yarn</span>\n<span class="token function">yarn</span> create @vitejs/app my-vue-app --template vue\n</code></pre></div><p>이와 같이 지정할 수 있습니다.</p><p>현재 Vite에서 공식적으로 지원하고 있는 템플릿은 아래와 같습니다.</p><ul><li><code>vanilla</code></li><li><code>vanilla-ts</code></li><li><code>vue</code></li><li><code>vue-ts</code></li><li><code>react</code></li><li><code>react-ts</code></li><li><code>preact</code></li><li><code>preact-ts</code></li><li><code>lit-element</code></li><li><code>lit-element-ts</code></li><li><code>svelte</code></li><li><code>svelte-ts</code></li></ul><p>각 템플릿에 대해 조금 더 자세한 설명이 필요하다면 <a href="https://github.com/vitejs/vite/tree/main/packages/create-app" target="_blank" rel="noopener noreferrer">@vitejs/create-app</a>을 참고해주세요.</p><h2 id="community-templates"><a class="header-anchor" href="#community-templates" aria-hidden="true">#</a>커뮤니티 템플릿</h2><p>Vite에서 제공하고 있는 템플릿 말고도 <a href="https://github.com/vitejs/awesome-vite#templates" target="_blank" rel="noopener noreferrer">Awesome-vite templates</a>와 같이 다양한 도구와 프레임워크를 타겟으로 하는 커뮤니티 템플릿들이 있습니다. <code>@vitejs/create-app</code>은 이러한 템플릿을 기반으로도 빠르게 프로젝트를 구성할 수 있도록 지원하고 있으며, <a href="https://github.com/Rich-Harris/degit" target="_blank" rel="noopener noreferrer">degit</a>을 이용합니다.</p><div class="language-bash"><pre><code>npx degit user/project my-project\n<span class="token builtin class-name">cd</span> my-project\n\n<span class="token function">npm</span> <span class="token function">install</span>\n<span class="token function">npm</span> run dev\n</code></pre></div><p>만약 특정 브랜치에서 시작하고 싶다면, <code>#</code> 접미사(Suffix)를 붙여 브랜치를 명시해주세요. 가령 <code>main</code> 브랜치에서 시작하고자 한다면, <code>#main</code>과 같이 말이죠.</p><div class="language-bash"><pre><code>npx degit user/project<span class="token comment">#main my-project</span>\n</code></pre></div><h2 id="index-html-and-project-root"><a class="header-anchor" href="#index-html-and-project-root" aria-hidden="true">#</a><code>index.html</code>그리고 프로젝트의 루트</h2><p>만들어진 Vite 프로젝트를 유심히 보면 <code>index.html</code> 파일이 <code>public</code> 디렉터리가 아닌 프로젝트의 루트에 위치해 있다는 것을 발견할 수 있습니다. 의도적으로 이렇게 위치시킨 것인데, 추가적인 번들링 과정 없이 <code>index.html</code> 파일이 앱의 진입점이 되게끔 하기 위함입니다.</p><p>vite는 <code>index.html</code> 파일을 소스 코드이자 JavaScript 모듈 그래프를 구성하는 요소 중 하나로 취급하고 있습니다. 다시말해, <code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;</code> 태그를 이용해 JavaScript 소스 코드를 가져온다는 의미이며, 인라인으로 작성된 <code>&lt;script type=&quot;module&quot;&gt;</code>이나 <code>&lt;link href&gt;</code>와 같은 CSS 역시 Vite에서 취급이 가능합니다. 추가적으로, Vite는 <code>index.html</code> 내에 존재하는 URL에 대해 <code>%PUBLIC_URL%</code>과 같은 Placeholder 없이 사용할 수 있도록 URL 베이스를 자동으로 맞춰줍니다.</p><p>vite는 정적(Static) HTTP 서버와 비슷하게 &quot;루트 디렉터리&quot;라는 개념을 갖고 있습니다. 향후 <code>&lt;root&gt;</code>라는 이름으로 문서 내에서 보게 되는데, 이는 Absolute URL을 프로젝트 루트를 가리키게끔 함으로써 일반적인 정적 파일 서버와 동일하게 코드를 작성할 수 있게 됩니다. 또한 vite는 프로젝트 루트 외부에서도 디펜던시를 가져올 수 있게끔 구현했는데, 이를 이용하면 모노리포 구성 등 다양한 작업이 가능합니다.</p><p>또한 vite는 여러 <code>.html</code> 파일을 앱의 진입점으로 하는 <a href="./build.html#multi-page-app">Multi-page apps</a>를 지원하고 있습니다.</p><h4 id="specifying-alternative-root"><a class="header-anchor" href="#specifying-alternative-root" aria-hidden="true">#</a>프로젝트 루트 지정</h4><p><code>vite</code>은 개발 서버를 시작할 때 현재 위치해 있는 디렉터리를 프로젝트 루트로 가정하고 동작합니다. 만약 특정 디렉터리를 지정해 프로젝트 루트로써 동작하게끔 하고 싶다면, <code>vite serve some/sub/dir</code> 명령으로 Vite를 시작해주세요.</p><h2 id="command-line-interface"><a class="header-anchor" href="#command-line-interface" aria-hidden="true">#</a>커맨드 라인 인터페이스</h2><p>vite가 설치된 프로젝트는 <code>vite</code> 명령을 통해 바로 Vite를 실행할 수 있습니다. (<code>npx vite</code>을 이용해도 되구요.) 기본적으로 Vite에서 제공하는 npm 스크립트는 아래와 같습니다.</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span> <span class="token comment">// start dev server</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span> <span class="token comment">// build for production</span>\n    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span> <span class="token comment">// locally preview production build</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Vite CLI와 함께 <code>--port</code>, <code>--https</code>와 같은 옵션을 사용할 수 있습니다. 모든 CLI 옵션을 보고자 한다면, vite가 설치된 프로젝트 안에서 <code>npx vite --help</code> 명령을 실행해주세요.</p><h2 id="using-unreleased-commits"><a class="header-anchor" href="#using-unreleased-commits" aria-hidden="true">#</a>릴리즈되지 않은 Vite 사용하기</h2><p>만약 아직 릴리즈되지 않은 Vite를 사용하고자 한다면, 먼저 <a href="https://github.com/vitejs/vite" target="_blank" rel="noopener noreferrer">Vite 리포지토리</a>를 로컬 컴퓨터로 클론한 뒤 이를 빌드해 사용하는 방법이 있습니다. (<a href="https://classic.yarnpkg.com/lang/en/" target="_blank" rel="noopener noreferrer">Yarn 1.x</a>가 필요해요.)</p><div class="language-bash"><pre><code><span class="token function">git</span> clone https://github.com/vitejs/vite.git\n<span class="token builtin class-name">cd</span> vite\n<span class="token function">yarn</span>\n<span class="token builtin class-name">cd</span> packages/vite\n<span class="token function">yarn</span> build\n<span class="token function">yarn</span> <span class="token function">link</span>\n</code></pre></div><p>이후 Vite를 클론한 프로젝트 위에서 <code>yarn link vite</code> 명령을 실행해 주세요. 이 작업 이후 개발 서버를 재시작(<code>yarn dev</code>)하게 되면, 클론된 Vite를 이용해 프로젝트를 진행할 수 있게 됩니다.</p><h2 id="community"><a class="header-anchor" href="#community" aria-hidden="true">#</a>커뮤니티</h2><p>질문이나 도움이 필요하다면, <a href="https://discord.gg/4cmKdMfpU5" target="_blank" rel="noopener noreferrer">Discord</a> 또는 <a href="https://github.com/vitejs/vite/discussions" target="_blank" rel="noopener noreferrer">GitHub Discussions</a>에 방문해주세요.</p>',43);o.render=function(a,n,o,i,r,p){return e(),t("div",null,[s])};export default o;export{n as __pageData};
