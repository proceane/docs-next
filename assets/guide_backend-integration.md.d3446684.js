import{o as n,c as s,d as a}from"./app.b84b895a.js";const t='{"title":"백엔드 프레임워크와 함께 사용하기","description":"","frontmatter":{"title":"백엔드 프레임워크와 함께 사용하기"},"headers":[],"relativePath":"guide/backend-integration.md","lastUpdated":1625605013368}',p={},o=a('<h1 id="backend-integration"><a class="header-anchor" href="#backend-integration" aria-hidden="true">#</a>백엔드 프레임워크와 함께 사용하기</h1><p>기존 백엔드(예 : Rails, Laravel)를 사용하여 HTML을 제공하지만 에셋에 Vite를 사용하기를 원한다면 <a href="https://github.com/vitejs/awesome-vite#integrations-with-backends" target="_blank" rel="noopener noreferrer">Awesome Vite</a>에 나열된 기존의 통합을 확인하십시오.</p><p>또는 다음 단계에 따라 수동으로 구성할 수 있습니다.</p><ol><li><p>Vite config 파일에서 항목을 구성하고 빌드 매니페스트를 활성화합니다.</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// outDir에서 manifest.json을 생성합니다.</span>\n    manifest<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 기본 .html 항목을 덮어씁니다.</span>\n      input<span class="token operator">:</span> <span class="token string">&#39;/path/to/main.js&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>만약 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noopener noreferrer"><code>@vitejs/plugin-legacy</code></a> 또는 <a href="/config/#build-polyfilldynamicimport"><code>build.dynamicImportPolyfill</code> 옵션</a>을 사용하는 경우라면, 이들이 자동으로 주입되지 않으므로 항목에 <a href="/config/#build-polyfilldynamicimport">dynamic import polyfill</a>을 추가해야 합니다.</p><div class="language-js"><pre><code><span class="token comment">// 앱 항목의 시작 영역에 추가합니다.</span>\n<span class="token keyword">import</span> <span class="token string">&#39;vite/dynamic-import-polyfill&#39;</span>\n</code></pre></div></li><li><p>개발을 위해 서버의 HTML 템플릿에 다음을 삽입합니다(<code>http://localhost:3000</code>을 Vite가 실행중인 로컬 URL로 대체).</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- 개발하는 경우 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/@vite/client<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>또한 서버가 Vite 작업 디렉토리에서 정적 에셋을 제공하도록 구성되어 있는지 확인하십시오. 그렇지 않으면 이미지와 같은 에셋이 제대로 로드되지 않습니다.</p><p>React를 <code>@vitejs/plugin-react-refresh</code>와 함께 사용하는 경우 플러그인이 사용자가 제공하는 HTML을 수정할 수 없기 때문에 위 스크립트 이전에 이것을 추가해야 합니다.</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> RefreshRuntime <span class="token keyword">from</span> <span class="token string">&quot;http://localhost:3000/@react-refresh&quot;</span>\n  RefreshRuntime<span class="token punctuation">.</span><span class="token function">injectIntoGlobalHook</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> \n  window<span class="token punctuation">.</span><span class="token function-variable function">$RefreshReg$</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  window<span class="token punctuation">.</span><span class="token function-variable function">$RefreshSig$</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> type\n  window<span class="token punctuation">.</span>__vite_plugin_react_preamble_installed__ <span class="token operator">=</span> <span class="token boolean">true</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>운영하는 경우 : <code>vite build</code>를 실행한 후에 <code>manifest.json</code>파일은 다른 에셋 파일과 함께 생성됩니다. 매니페스트 파일 예시는 다음과 같습니다.</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;main.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/main.4889e940.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;isEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;dynamicImports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;views/foo.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;css&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;assets/main.b82dbe22.css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;assets/asset.0ab0f9cd.png&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;views/foo.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/foo.869aea0d.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;views/foo.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;isDynamicEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;_shared.83069a53.js&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;_shared.83069a53.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/shared.83069a53.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>매니페스트는 <code>Record&lt;name, chunk&gt;</code> 구조를 가집니다.</li><li>항목 또는 동적 항목 청크의 키는 프로젝트 루트의 상대 src 경로입니다.</li><li>항목이 아닌 청크의 경우 키는 <code>_</code>가 접두사로 붙은 파일명이 기본 이름이 됩니다.</li><li>청크에는 정적 및 동적 불러오기(둘 다 매니페스트의 해당 청크에 매핑되는 키)에 대한 정보와 해당 css 및 에셋 파일(있는 경우)이 포함됩니다.</li></ul><p>해시 된 파일 이름으로 링크를 렌더링하거나 지시문을 미리 로드하기 위해 이 파일을 사용할 수 있습니다(참고 : 여기에 있는 구문은 설명하기 위한 용도이며 서버 템플릿 언어로 대체합니다).</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- 운영하는 경우 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/{{ manifest[<span class="token punctuation">&#39;</span>main.js<span class="token punctuation">&#39;</span>].css }}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/{{ manifest[<span class="token punctuation">&#39;</span>main.js<span class="token punctuation">&#39;</span>].file }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ol>',4);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
