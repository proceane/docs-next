import{o as n,c as s,d as a}from"./app.b84b895a.js";const t='{"title":"JavaScript API","description":"","frontmatter":{"title":"JavaScript API"},"headers":[{"level":2,"title":"createServer","slug":"createserver"},{"level":2,"title":"InlineConfig","slug":"inline-config"},{"level":2,"title":"ViteDevServer","slug":"vitedevserver"},{"level":2,"title":"build","slug":"build"},{"level":2,"title":"resolveConfig","slug":"resolveconfig"}],"relativePath":"guide/api-javascript.md","lastUpdated":1625605013368}',o={},e=a('<h1 id="javascript-api"><a class="header-anchor" href="#javascript-api" aria-hidden="true">#</a>JavaScript API</h1><p>Vite&#39;s JavaScript APIs are fully typed, and it&#39;s recommended to use TypeScript or enable JS type checking in VSCode to leverage the intellisense and validation.</p><h2 id="createserver"><a class="header-anchor" href="#createserver" aria-hidden="true">#</a><code>createServer</code></h2><p><strong>Type Signature</strong></p><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span>inlineConfig<span class="token operator">?</span><span class="token operator">:</span> InlineConfig<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span>\n</code></pre></div><p><strong>Example Usage</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// any valid user config options, plus `mode` and `configFile`</span>\n    configFile<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    root<span class="token operator">:</span> __dirname<span class="token punctuation">,</span>\n    server<span class="token operator">:</span> <span class="token punctuation">{</span>\n      port<span class="token operator">:</span> <span class="token number">1337</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="inline-config"><a class="header-anchor" href="#inline-config" aria-hidden="true">#</a><code>InlineConfig</code></h2><p>The <code>InlineConfig</code> interface extends <code>UserConfig</code> with additional properties:</p><ul><li><code>configFile</code>: specify config file to use. If not set, Vite will try to automatically resolve one from project root. Set to <code>false</code> to disable auto resolving.</li><li><code>envFile</code>: Set to <code>false</code> to disable <code>.env</code> files.</li></ul><h2 id="vitedevserver"><a class="header-anchor" href="#vitedevserver" aria-hidden="true">#</a><code>ViteDevServer</code></h2><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ViteDevServer</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * The resolved vite config object.\n   */</span>\n  config<span class="token operator">:</span> ResolvedConfig\n  <span class="token comment">/**\n   * A connect app instance\n   * - Can be used to attach custom middlewares to the dev server.\n   * - Can also be used as the handler function of a custom http server\n   *   or as a middleware in any connect-style Node.js frameworks.\n   *\n   * https://github.com/senchalabs/connect#use-middleware\n   */</span>\n  middlewares<span class="token operator">:</span> Connect<span class="token punctuation">.</span>Server\n  <span class="token comment">/**\n   * Native Node http server instance.\n   * Will be null in middleware mode.\n   */</span>\n  httpServer<span class="token operator">:</span> http<span class="token punctuation">.</span>Server <span class="token operator">|</span> <span class="token keyword">null</span>\n  <span class="token comment">/**\n   * Chokidar watcher instance.\n   * https://github.com/paulmillr/chokidar#api\n   */</span>\n  watcher<span class="token operator">:</span> FSWatcher\n  <span class="token comment">/**\n   * Web socket server with `send(payload)` method.\n   */</span>\n  ws<span class="token operator">:</span> WebSocketServer\n  <span class="token comment">/**\n   * Rollup plugin container that can run plugin hooks on a given file.\n   */</span>\n  pluginContainer<span class="token operator">:</span> PluginContainer\n  <span class="token comment">/**\n   * Module graph that tracks the import relationships, url to file mapping\n   * and hmr state.\n   */</span>\n  moduleGraph<span class="token operator">:</span> ModuleGraph\n  <span class="token comment">/**\n   * Programmatically resolve, load and transform a URL and get the result\n   * without going through the http request pipeline.\n   */</span>\n  <span class="token function">transformRequest</span><span class="token punctuation">(</span>\n    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    options<span class="token operator">?</span><span class="token operator">:</span> TransformOptions\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TransformResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Apply vite built-in HTML transforms and any plugin HTML transforms.\n   */</span>\n  <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Util for transforming a file with esbuild.\n   * Can be useful for certain plugins.\n   */</span>\n  <span class="token function">transformWithEsbuild</span><span class="token punctuation">(</span>\n    code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    options<span class="token operator">?</span><span class="token operator">:</span> EsbuildTransformOptions<span class="token punctuation">,</span>\n    inMap<span class="token operator">?</span><span class="token operator">:</span> object\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ESBuildTransformResult<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Load a given URL as an instantiated module for SSR.\n   */</span>\n  <span class="token function">ssrLoadModule</span><span class="token punctuation">(</span>\n    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> isolated<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span>\n  <span class="token comment">/**\n   * Fix ssr error stacktrace.\n   */</span>\n  <span class="token function">ssrFixStacktrace</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Start the server.\n   */</span>\n  <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> isRestart<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Stop the server.\n   */</span>\n  <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="build"><a class="header-anchor" href="#build" aria-hidden="true">#</a><code>build</code></h2><p><strong>Type Signature</strong></p><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>\n  inlineConfig<span class="token operator">?</span><span class="token operator">:</span> InlineConfig\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>RollupOutput <span class="token operator">|</span> RollupOutput<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n</code></pre></div><p><strong>Example Usage</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> build <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    root<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./project&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    build<span class="token operator">:</span> <span class="token punctuation">{</span>\n      base<span class="token operator">:</span> <span class="token string">&#39;/foo/&#39;</span><span class="token punctuation">,</span>\n      rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="resolveconfig"><a class="header-anchor" href="#resolveconfig" aria-hidden="true">#</a><code>resolveConfig</code></h2><p><strong>Type Signature</strong></p><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>\n  inlineConfig<span class="token operator">:</span> InlineConfig<span class="token punctuation">,</span>\n  command<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span>\n  defaultMode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResolvedConfig<span class="token operator">&gt;</span>\n</code></pre></div>',20);o.render=function(a,t,o,p,c,l){return n(),s("div",null,[e])};export default o;export{t as __pageData};
